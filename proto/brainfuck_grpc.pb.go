// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: proto/brainfuck.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BrainfuckServiceClient is the client API for BrainfuckService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BrainfuckServiceClient interface {
	Interpret(ctx context.Context, in *BrainfuckSourceRequest, opts ...grpc.CallOption) (*OutputResponse, error)
	InterpretStream(ctx context.Context, opts ...grpc.CallOption) (BrainfuckService_InterpretStreamClient, error)
}

type brainfuckServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBrainfuckServiceClient(cc grpc.ClientConnInterface) BrainfuckServiceClient {
	return &brainfuckServiceClient{cc}
}

func (c *brainfuckServiceClient) Interpret(ctx context.Context, in *BrainfuckSourceRequest, opts ...grpc.CallOption) (*OutputResponse, error) {
	out := new(OutputResponse)
	err := c.cc.Invoke(ctx, "/proto.BrainfuckService/Interpret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brainfuckServiceClient) InterpretStream(ctx context.Context, opts ...grpc.CallOption) (BrainfuckService_InterpretStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &BrainfuckService_ServiceDesc.Streams[0], "/proto.BrainfuckService/InterpretStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &brainfuckServiceInterpretStreamClient{stream}
	return x, nil
}

type BrainfuckService_InterpretStreamClient interface {
	Send(*BrainfuckSourceRequest) error
	Recv() (*OutputResponse, error)
	grpc.ClientStream
}

type brainfuckServiceInterpretStreamClient struct {
	grpc.ClientStream
}

func (x *brainfuckServiceInterpretStreamClient) Send(m *BrainfuckSourceRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *brainfuckServiceInterpretStreamClient) Recv() (*OutputResponse, error) {
	m := new(OutputResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BrainfuckServiceServer is the server API for BrainfuckService service.
// All implementations must embed UnimplementedBrainfuckServiceServer
// for forward compatibility
type BrainfuckServiceServer interface {
	Interpret(context.Context, *BrainfuckSourceRequest) (*OutputResponse, error)
	InterpretStream(BrainfuckService_InterpretStreamServer) error
	mustEmbedUnimplementedBrainfuckServiceServer()
}

// UnimplementedBrainfuckServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBrainfuckServiceServer struct {
}

func (UnimplementedBrainfuckServiceServer) Interpret(context.Context, *BrainfuckSourceRequest) (*OutputResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Interpret not implemented")
}
func (UnimplementedBrainfuckServiceServer) InterpretStream(BrainfuckService_InterpretStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method InterpretStream not implemented")
}
func (UnimplementedBrainfuckServiceServer) mustEmbedUnimplementedBrainfuckServiceServer() {}

// UnsafeBrainfuckServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BrainfuckServiceServer will
// result in compilation errors.
type UnsafeBrainfuckServiceServer interface {
	mustEmbedUnimplementedBrainfuckServiceServer()
}

func RegisterBrainfuckServiceServer(s grpc.ServiceRegistrar, srv BrainfuckServiceServer) {
	s.RegisterService(&BrainfuckService_ServiceDesc, srv)
}

func _BrainfuckService_Interpret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrainfuckSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrainfuckServiceServer).Interpret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BrainfuckService/Interpret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrainfuckServiceServer).Interpret(ctx, req.(*BrainfuckSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrainfuckService_InterpretStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BrainfuckServiceServer).InterpretStream(&brainfuckServiceInterpretStreamServer{stream})
}

type BrainfuckService_InterpretStreamServer interface {
	Send(*OutputResponse) error
	Recv() (*BrainfuckSourceRequest, error)
	grpc.ServerStream
}

type brainfuckServiceInterpretStreamServer struct {
	grpc.ServerStream
}

func (x *brainfuckServiceInterpretStreamServer) Send(m *OutputResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *brainfuckServiceInterpretStreamServer) Recv() (*BrainfuckSourceRequest, error) {
	m := new(BrainfuckSourceRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BrainfuckService_ServiceDesc is the grpc.ServiceDesc for BrainfuckService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BrainfuckService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.BrainfuckService",
	HandlerType: (*BrainfuckServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Interpret",
			Handler:    _BrainfuckService_Interpret_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "InterpretStream",
			Handler:       _BrainfuckService_InterpretStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/brainfuck.proto",
}
